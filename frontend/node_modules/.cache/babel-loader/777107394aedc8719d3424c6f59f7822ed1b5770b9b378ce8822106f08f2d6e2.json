{"ast":null,"code":"import{useReducer,useEffect}from\"react\";import{Streamlit}from\"streamlit-component-lib\";// Define action types\nvar ActionTypes=/*#__PURE__*/function(ActionTypes){ActionTypes[\"SET_RENDER_DATA\"]=\"SET_RENDER_DATA\";return ActionTypes;}(ActionTypes||{});// Define action interface\n// Define reducer function\nconst reducer=(state,action)=>{switch(action.type){case ActionTypes.SET_RENDER_DATA:return action.payload;default:return state;}};/**\n * Returns `RenderData` received from Streamlit after the first render event received.\n */export const useNullableRenderData=()=>{const[renderData,dispatch]=useReducer(reducer,undefined);useEffect(()=>{const onRenderEvent=event=>{const renderEvent=event;dispatch({type:ActionTypes.SET_RENDER_DATA,payload:renderEvent.detail});};// Set up event listeners, and signal to Streamlit that we're ready.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT,onRenderEvent);Streamlit.setComponentReady();const cleanup=()=>{Streamlit.events.removeEventListener(Streamlit.RENDER_EVENT,onRenderEvent);};return cleanup;},[]);return renderData;};","map":{"version":3,"names":["useReducer","useEffect","Streamlit","ActionTypes","reducer","state","action","type","SET_RENDER_DATA","payload","useNullableRenderData","renderData","dispatch","undefined","onRenderEvent","event","renderEvent","detail","events","addEventListener","RENDER_EVENT","setComponentReady","cleanup","removeEventListener"],"sources":["/Users/yiwang/Documents/ChatYoutube/streamlit-annotation-tools/src/streamlit_annotation_tools/frontend/src/utils/useNullableRenderData.ts"],"sourcesContent":["import { useReducer, useEffect } from \"react\";\nimport { Streamlit, RenderData } from \"streamlit-component-lib\";\n\n// Define action types\nenum ActionTypes {\n  SET_RENDER_DATA = 'SET_RENDER_DATA',\n}\n\n// Define action interface\ninterface Action {\n  type: ActionTypes;\n  payload: RenderData;\n}\n\n// Define reducer function\nconst reducer = (state: RenderData | undefined, action: Action) => {\n  switch (action.type) {\n    case ActionTypes.SET_RENDER_DATA:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\n/**\n * Returns `RenderData` received from Streamlit after the first render event received.\n */\nexport const useNullableRenderData = (): RenderData | undefined => {\n  const [renderData, dispatch] = useReducer(reducer, undefined);\n\n  useEffect(() => {\n    const onRenderEvent = (event: Event): void => {\n      const renderEvent = event as CustomEvent<RenderData>;\n      dispatch({ type: ActionTypes.SET_RENDER_DATA, payload: renderEvent.detail });\n    };\n\n    // Set up event listeners, and signal to Streamlit that we're ready.\n    Streamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRenderEvent);\n    Streamlit.setComponentReady();\n\n    const cleanup = () => {\n      Streamlit.events.removeEventListener(Streamlit.RENDER_EVENT, onRenderEvent);\n    };\n    return cleanup;\n  }, []);\n\n  return renderData;\n};\n"],"mappings":"AAAA,OAASA,UAAU,CAAEC,SAAS,KAAQ,OAAO,CAC7C,OAASC,SAAS,KAAoB,yBAAyB,CAE/D;AAAA,GACK,CAAAC,WAAW,uBAAXA,WAAW,EAAXA,WAAW,4CAAX,CAAAA,WAAW,GAAXA,WAAW,MAIhB;AAMA;AACA,KAAM,CAAAC,OAAO,CAAGA,CAACC,KAA6B,CAAEC,MAAc,GAAK,CACjE,OAAQA,MAAM,CAACC,IAAI,EACjB,IAAK,CAAAJ,WAAW,CAACK,eAAe,CAC9B,MAAO,CAAAF,MAAM,CAACG,OAAO,CACvB,QACE,MAAO,CAAAJ,KAAK,CAChB,CACF,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAK,qBAAqB,CAAGA,CAAA,GAA8B,CACjE,KAAM,CAACC,UAAU,CAAEC,QAAQ,CAAC,CAAGZ,UAAU,CAACI,OAAO,CAAES,SAAS,CAAC,CAE7DZ,SAAS,CAAC,IAAM,CACd,KAAM,CAAAa,aAAa,CAAIC,KAAY,EAAW,CAC5C,KAAM,CAAAC,WAAW,CAAGD,KAAgC,CACpDH,QAAQ,CAAC,CAAEL,IAAI,CAAEJ,WAAW,CAACK,eAAe,CAAEC,OAAO,CAAEO,WAAW,CAACC,MAAO,CAAC,CAAC,CAC9E,CAAC,CAED;AACAf,SAAS,CAACgB,MAAM,CAACC,gBAAgB,CAACjB,SAAS,CAACkB,YAAY,CAAEN,aAAa,CAAC,CACxEZ,SAAS,CAACmB,iBAAiB,CAAC,CAAC,CAE7B,KAAM,CAAAC,OAAO,CAAGA,CAAA,GAAM,CACpBpB,SAAS,CAACgB,MAAM,CAACK,mBAAmB,CAACrB,SAAS,CAACkB,YAAY,CAAEN,aAAa,CAAC,CAC7E,CAAC,CACD,MAAO,CAAAQ,OAAO,CAChB,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAAX,UAAU,CACnB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}